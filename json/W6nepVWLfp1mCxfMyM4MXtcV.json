{
  "encodedData": "{"questions":[{"question":"Code heart 01","code":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=\\, initial-scale=1.0\">\r\n    <title>Heart</title>\r\n    <style type=\"text/css\">\r\n    body {\r\n        margin: 0;\r\n        padding: 0;\r\n        background: white;\r\n    }\r\n\r\n    #myCanvas {\r\n        display: #f00;\r\n    }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n\r\n    <canvas width=\"393\" height=\"596\" id=\"myLove\"></canvas>\r\n\r\n    <script>\r\n    window.requestAnimFrame = (function () {\r\n        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame\r\n        || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\r\n            window.setTimeout(callback,\r\n            1000 / 60);\r\n        };\r\n    })();\r\n\r\n    var FX = {\r\n        config: {\r\n        background: 'rgba(250,250,250,0.2)',\r\n        color: '#000',\r\n        highlight: '#f00',\r\n\r\n        },\r\n        dots: []\r\n    };\r\n    FX.canvas = document.getElementById('myLove');\r\n    FX.ctx = FX.canvas.getContext('2d');\r\n    /* *Extend Math Object */\r\n    Math.TO_RAD = Math.PI / 180;\r\n    Math.getDistance = function (x1, y1, x2, y2) {\r\n        var xs = 0, ys = 0;\r\n        xs = x1 - x2;\r\n        ys = y1 - y2;\r\n        xs = xs * xs;\r\n        ys = ys * ys;\r\n        return Math.sqrt(xs + ys);\r\n    };\r\n    Math.getDegree = function (x1, y1, x2, y2) {\r\n        var dx = x2 - x1, dy = y2 - y1;\r\n        return Math.atan2(dy, dx) / Math.TO_RAD;\r\n    };\r\n    /* *Dot Object */\r\n    var Dot = function (opts) {\r\n        this.color = opts.color;\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.dest_x = (opts.dest_x - 75);\r\n        this.dest_y = (opts.dest_y - 75);\r\n    };\r\n    Dot.prototype.update = function () {\r\n        var d = this, dist_x = d.dest_x - d.x, dist_y = d.dest_y - d.y;\r\n        d.x += dist_x * 0.05;\r\n        d.y += dist_y * 0.05;\r\n        FX.ctx.fillStyle = d.color;\r\n        FX.ctx.fillRect(d.x - 2, d.y - 2, 4, 4);\r\n    };\r\n    /* *full screen canvas */\r\n    FX.setFullscreen = function () {\r\n        FX.width = FX.canvas.width = window.innerWidth;\r\n        FX.height = FX.canvas.height = window.innerHeight;\r\n    };\r\n    /* *Mouse */\r\n    FX.handleMouseEvent = function (e, power) {\r\n        var radius = 75, k = FX.dots.length, i = 0, mx, my, dist, degree, d;\r\n        if (e.offsetX) {\r\n        mx = e.offsetX;\r\n        my = e.offsetY;\r\n        } else if (e.layerX) {\r\n        mx = e.layerX;\r\n        my = e.layerY;\r\n        }\r\n        mx -= FX.width / 2;\r\n        my -= FX.height / 2;\r\n        for (; i < k; i = i + 1) {\r\n        d = FX.dots[i];\r\n        dist = Math.getDistance(mx, my, d.x, d.y);\r\n        if (dist < radius) {\r\n            degree = Math.getDegree(d.x, d.y, mx, my);\r\n            d.x += (Math.cos(degree * Math.TO_RAD) * ((radius - dist) * power));\r\n            d.y += (Math.sin(degree * Math.TO_RAD) * ((radius - dist) * power));\r\n            d.color = FX.config.highlight;\r\n        } else {\r\n            d.color = FX.config.color;\r\n        }\r\n        }\r\n    };\r\n    /* *create the heart */\r\n    FX.createHeart = function () {\r\n        var coords = [[1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [3, 10], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [4, 10], [4, 11], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9], [5, 10], [5, 11], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [6, 10], [6, 11], [6, 12], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9], [7, 10], [7, 11], [7, 12], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [8, 10], [8, 11], [8, 12], [8, 13], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9], [9, 10], [9, 11], [9, 12], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [10, 10], [10, 11], [11, 2], [11, 3], [11, 4], [11, 5], [11, 6], [11, 7], [11, 8], [11, 9], [11, 10], [11, 11], [12, 2], [12, 3], [12, 4], [12, 5], [12, 6], [12, 7], [12, 8], [12, 9], [12, 10], [13, 3], [13, 4], [13, 5], [13, 6], [13, 7], [13, 8], [13, 9], [14, 4], [14, 5], [14, 6], [14, 7], [14, 8]],\r\n        k = coords.length, raster = 10, i = 0;\r\n        for (; i < k; i = i + 1) {\r\n        FX.dots.push(new Dot({\r\n            dest_x: coords[i][0] * raster, dest_y: coords[i][1] * raster, color: FX.config.color\r\n        }));\r\n        }\r\n    };\r\n    /* *main loop */\r\n    FX.loop = function () {\r\n        var ctx = FX.ctx, k = FX.dots.length, i = 0;\r\n        ctx.fillStyle = FX.config.background;\r\n        ctx.fillRect(0, 0, FX.width, FX.height);\r\n        ctx.save();\r\n        ctx.translate(FX.width / 2, FX.height / 2);\r\n        for (; i < k; i = i + 1) {\r\n        FX.dots[i].update();\r\n        }\r\n        ctx.restore();\r\n        requestAnimFrame(FX.loop);\r\n    };\r\n    /* *Event bindings */\r\n    window.addEventListener('resize', FX.setFullscreen);\r\n    FX.canvas.addEventListener('mousemove', function (e) {\r\n        FX.handleMouseEvent(e, -0.1);\r\n    });\r\n    FX.canvas.addEventListener('mousedown', function (e) {\r\n        FX.handleMouseEvent(e, 1);\r\n    });\r\n    /* *Init */\r\n    FX.setFullscreen();\r\n    FX.createHeart();\r\n    FX.loop(); \r\n    </script>\r\n\r\n\r\n</body>\r\n\r\n</html>"},{"question":"Code heart 02","code":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Heart1</title>\r\n    <style>\r\n      canvas {\r\n        position: absolute;\r\n        left: 0;\r\n        top: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        background-color: rgba(0, 0, 0, .2);\r\n      }\r\n</style>\r\n</head>\r\n\r\n<body>\r\n\r\n    <canvas id=\"heart\" width=\"393\" height=\"596\"></canvas>\r\n\r\n    <script>\r\n      window.requestAnimationFrame =\r\n        window.__requestAnimationFrame ||\r\n        window.requestAnimationFrame ||\r\n        window.webkitRequestAnimationFrame ||\r\n        window.mozRequestAnimationFrame ||\r\n        window.oRequestAnimationFrame ||\r\n        window.msRequestAnimationFrame ||\r\n        (function () {\r\n          return function (callback, element) {\r\n            var lastTime = element.__lastTime;\r\n            if (lastTime === undefined) {\r\n              lastTime = 0;\r\n            }\r\n            var currTime = Date.now();\r\n            var timeToCall = Math.max(1, 33 - (currTime - lastTime));\r\n            window.setTimeout(callback, timeToCall);\r\n            element.__lastTime = currTime + timeToCall;\r\n          };\r\n        })();\r\n      window.isDevice = (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(((navigator.userAgent || navigator.vendor || window.opera)).toLowerCase()));\r\n      var loaded = false;\r\n      var init = function () {\r\n        if (loaded) return;\r\n        loaded = true;\r\n        var mobile = window.isDevice;\r\n        var koef = mobile ? 0.5 : 1;\r\n        var canvas = document.getElementById('heart');\r\n        var ctx = canvas.getContext('2d');\r\n        var width = canvas.width = koef * innerWidth;\r\n        var height = canvas.height = koef * innerHeight;\r\n        var rand = Math.random;\r\n        ctx.fillStyle = \"rgba(0,0,0,1)\";\r\n        ctx.fillRect(0, 0, width, height);\r\n        ctx.font = \"30px Arial\";\r\n        ctx.fillText(\"Tuan\", 10, 50);\r\n        var heartPosition = function (rad) {\r\n          //return [Math.sin(rad), Math.cos(rad)];\r\n          return [Math.pow(Math.sin(rad), 3), -(15 * Math.cos(rad) - 5 * Math.cos(2 * rad) - 2 * Math.cos(3 * rad) - Math.cos(4 * rad))];\r\n        };\r\n        var scaleAndTranslate = function (pos, sx, sy, dx, dy) {\r\n          return [dx + pos[0] * sx, dy + pos[1] * sy];\r\n        };\r\n        window.addEventListener('resize', function () {\r\n          width = canvas.width = koef * innerWidth;\r\n          height = canvas.height = koef * innerHeight;\r\n          ctx.fillStyle = \"rgba(0,0,0,1)\";\r\n          ctx.fillRect(0, 0, width, height);\r\n        });\r\n        var traceCount = mobile ? 20 : 50;\r\n        var pointsOrigin = [];\r\n        var i;\r\n        var dr = mobile ? 0.3 : 0.1;\r\n        for (i = 0; i < Math.PI * 2; i += dr) pointsOrigin.push(scaleAndTranslate(heartPosition(i), 210, 13, 0, 0));\r\n        for (i = 0; i < Math.PI * 2; i += dr) pointsOrigin.push(scaleAndTranslate(heartPosition(i), 150, 9, 0, 0));\r\n        for (i = 0; i < Math.PI * 2; i += dr) pointsOrigin.push(scaleAndTranslate(heartPosition(i), 90, 5, 0, 0));\r\n        var heartPointsCount = pointsOrigin.length;\r\n        var targetPoints = [];\r\n        var pulse = function (kx, ky) {\r\n          for (i = 0; i < pointsOrigin.length; i++) {\r\n            targetPoints[i] = [];\r\n            targetPoints[i][0] = kx * pointsOrigin[i][0] + width / 2;\r\n            targetPoints[i][1] = ky * pointsOrigin[i][1] + height / 2;\r\n          }\r\n        };\r\n        var e = [];\r\n        for (i = 0; i < heartPointsCount; i++) {\r\n          var x = rand() * width;\r\n          var y = rand() * height;\r\n          e[i] = {\r\n            vx: 0,\r\n            vy: 0,\r\n            R: 2,\r\n            speed: rand() + 5,\r\n            q: ~~(rand() * heartPointsCount),\r\n            D: 2 * (i % 2) - 1,\r\n            force: 0.2 * rand() + 0.7,\r\n            f: \"hsla(0,\" + ~~(40 * rand() + 60) + \"%,\" + ~~(60 * rand() + 20) + \"%,.3)\",\r\n            //f: \"rgb(250, 117, 135)\",\r\n            trace: []\r\n          };\r\n          for (var k = 0; k < traceCount; k++) e[i].trace[k] = {\r\n            x: x,\r\n            y: y\r\n          };\r\n        }\r\n        var config = {\r\n          traceK: 0.4,\r\n          // timeDelta: 0.01\r\n          timeDelta: 0.6\r\n        };\r\n        var time = 0;\r\n        var loop = function () {\r\n          var n = -Math.cos(time);\r\n          pulse((1 + n) * .5, (1 + n) * .5);\r\n          time += ((Math.sin(time)) < 0 ? 9 : (n > 0.8) ? .2 : 1) * config.timeDelta;\r\n          ctx.fillStyle = \"rgba(0,0,0,.1)\";\r\n          ctx.fillRect(0, 0, width, height);\r\n          for (i = e.length; i--;) {\r\n            var u = e[i];\r\n            var q = targetPoints[u.q];\r\n            var dx = u.trace[0].x - q[0];\r\n            var dy = u.trace[0].y - q[1];\r\n            var length = Math.sqrt(dx * dx + dy * dy);\r\n            if (10 > length) {\r\n              if (0.95 < rand()) {\r\n                u.q = ~~(rand() * heartPointsCount);\r\n              } else {\r\n                if (0.99 < rand()) {\r\n                  u.D *= -1;\r\n                }\r\n                u.q += u.D;\r\n                u.q %= heartPointsCount;\r\n                if (0 > u.q) {\r\n                  u.q += heartPointsCount;\r\n                }\r\n              }\r\n            }\r\n            u.vx += -dx / length * u.speed;\r\n            u.vy += -dy / length * u.speed;\r\n            u.trace[0].x += u.vx;\r\n            u.trace[0].y += u.vy;\r\n            u.vx *= u.force;\r\n            u.vy *= u.force;\r\n            for (k = 0; k < u.trace.length - 1;) {\r\n              var T = u.trace[k];\r\n              var N = u.trace[++k];\r\n              N.x -= config.traceK * (N.x - T.x);\r\n              N.y -= config.traceK * (N.y - T.y);\r\n            }\r\n            ctx.fillStyle = u.f;\r\n            for (k = 0; k < u.trace.length; k++) {\r\n              ctx.fillRect(u.trace[k].x, u.trace[k].y, 1, 1);\r\n            }\r\n          }\r\n\r\n          window.requestAnimationFrame(loop, canvas);\r\n        };\r\n        loop();\r\n      };\r\n      var s = document.readyState;\r\n      if (s === 'complete' || s === 'loaded' || s === 'interactive') init();\r\n      else document.addEventListener('DOMContentLoaded', init, false);\r\n    </script>\r\n\r\n</body>\r\n\r\n</html>"},{"question":"Code heart 03","code":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Heart2</title>\r\n    <style>\r\n        canvas {\r\n            position: absolute;\r\n            left: 0;\r\n            top: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            background-color: rgba(0, 0, 0, .2);\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n\r\n    <canvas id=\"heart\" width=\"393\" height=\"596\"></canvas>\r\n\r\n    <script>\r\n        window.requestAnimationFrame =\r\n            window.__requestAnimationFrame ||\r\n            window.requestAnimationFrame ||\r\n            window.webkitRequestAnimationFrame ||\r\n            window.mozRequestAnimationFrame ||\r\n            window.oRequestAnimationFrame ||\r\n            window.msRequestAnimationFrame ||\r\n            (function () {\r\n                return function (callback, element) {\r\n                    var lastTime = element.__lastTime;\r\n                    if (lastTime === undefined) {\r\n                        lastTime = 0;\r\n                    }\r\n                    var currTime = Date.now();\r\n                    var timeToCall = Math.max(1, 33 - (currTime - lastTime));\r\n                    window.setTimeout(callback, timeToCall);\r\n                    element.__lastTime = currTime + timeToCall;\r\n                };\r\n            })();\r\n        window.isDevice = (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(((navigator.userAgent || navigator.vendor || window.opera)).toLowerCase()));\r\n        var loaded = false;\r\n        var init = function () {\r\n            if (loaded) return;\r\n            loaded = true;\r\n            var mobile = window.isDevice;\r\n            var koef = mobile ? 0.5 : 1;\r\n            var canvas = document.getElementById('heart');\r\n            var ctx = canvas.getContext('2d');\r\n            var width = canvas.width = koef * innerWidth;\r\n            var height = canvas.height = koef * innerHeight;\r\n            var rand = Math.random;\r\n            ctx.fillStyle = \"rgba(0,0,0,1)\";\r\n            ctx.fillRect(0, 0, width, height);\r\n\r\n            var heartPosition = function (rad) {\r\n                //return [Math.sin(rad), Math.cos(rad)];\r\n                return [Math.pow(Math.sin(rad), 3), -(15 * Math.cos(rad) - 5 * Math.cos(2 * rad) - 2 * Math.cos(3 * rad) - Math.cos(4 * rad))];\r\n            };\r\n            var scaleAndTranslate = function (pos, sx, sy, dx, dy) {\r\n                return [dx + pos[0] * sx, dy + pos[1] * sy];\r\n            };\r\n\r\n            window.addEventListener('resize', function () {\r\n                width = canvas.width = koef * innerWidth;\r\n                height = canvas.height = koef * innerHeight;\r\n                ctx.fillStyle = \"rgba(0,0,0,1)\";\r\n                ctx.fillRect(0, 0, width, height);\r\n            });\r\n\r\n            var traceCount = mobile ? 20 : 50;\r\n            var pointsOrigin = [];\r\n            var i;\r\n            var dr = mobile ? 0.3 : 0.1;\r\n            for (i = 0; i < Math.PI * 2; i += dr) pointsOrigin.push(scaleAndTranslate(heartPosition(i), 210, 13, 0, 0));\r\n            for (i = 0; i < Math.PI * 2; i += dr) pointsOrigin.push(scaleAndTranslate(heartPosition(i), 150, 9, 0, 0));\r\n            for (i = 0; i < Math.PI * 2; i += dr) pointsOrigin.push(scaleAndTranslate(heartPosition(i), 90, 5, 0, 0));\r\n            var heartPointsCount = pointsOrigin.length;\r\n\r\n            var targetPoints = [];\r\n            var pulse = function (kx, ky) {\r\n                for (i = 0; i < pointsOrigin.length; i++) {\r\n                    targetPoints[i] = [];\r\n                    targetPoints[i][0] = kx * pointsOrigin[i][0] + width / 2;\r\n                    targetPoints[i][1] = ky * pointsOrigin[i][1] + height / 2;\r\n                }\r\n            };\r\n\r\n            var e = [];\r\n            for (i = 0; i < heartPointsCount; i++) {\r\n                var x = rand() * width;\r\n                var y = rand() * height;\r\n                e[i] = {\r\n                    vx: 0,\r\n                    vy: 0,\r\n                    R: 2,\r\n                    speed: rand() + 5,\r\n                    q: ~~(rand() * heartPointsCount),\r\n                    D: 2 * (i % 2) - 1,\r\n                    force: 0.2 * rand() + 0.7,\r\n                    f: \"hsla(0,\" + ~~(40 * rand() + 60) + \"%,\" + ~~(60 * rand() + 20) + \"%,.3)\",\r\n                    trace: []\r\n                };\r\n                for (var k = 0; k < traceCount; k++) e[i].trace[k] = { x: x, y: y };\r\n            }\r\n\r\n            var config = {\r\n                traceK: 0.4,\r\n                timeDelta: 0.01\r\n            };\r\n\r\n            var time = 0;\r\n            var loop = function () {\r\n                var n = -Math.cos(time);\r\n                pulse((1 + n) * .5, (1 + n) * .5);\r\n                time += ((Math.sin(time)) < 0 ? 9 : (n > 0.8) ? .2 : 1) * config.timeDelta;\r\n                ctx.fillStyle = \"rgba(0,0,0,.1)\";\r\n                ctx.fillRect(0, 0, width, height);\r\n                for (i = e.length; i--;) {\r\n                    var u = e[i];\r\n                    var q = targetPoints[u.q];\r\n                    var dx = u.trace[0].x - q[0];\r\n                    var dy = u.trace[0].y - q[1];\r\n                    var length = Math.sqrt(dx * dx + dy * dy);\r\n                    if (10 > length) {\r\n                        if (0.95 < rand()) {\r\n                            u.q = ~~(rand() * heartPointsCount);\r\n                        }\r\n                        else {\r\n                            if (0.99 < rand()) {\r\n                                u.D *= -1;\r\n                            }\r\n                            u.q += u.D;\r\n                            u.q %= heartPointsCount;\r\n                            if (0 > u.q) {\r\n                                u.q += heartPointsCount;\r\n                            }\r\n                        }\r\n                    }\r\n                    u.vx += -dx / length * u.speed;\r\n                    u.vy += -dy / length * u.speed;\r\n                    u.trace[0].x += u.vx;\r\n                    u.trace[0].y += u.vy;\r\n                    u.vx *= u.force;\r\n                    u.vy *= u.force;\r\n                    for (k = 0; k < u.trace.length - 1;) {\r\n                        var T = u.trace[k];\r\n                        var N = u.trace[++k];\r\n                        N.x -= config.traceK * (N.x - T.x);\r\n                        N.y -= config.traceK * (N.y - T.y);\r\n                    }\r\n                    ctx.fillStyle = u.f;\r\n                    for (k = 0; k < u.trace.length; k++) {\r\n                        ctx.fillRect(u.trace[k].x, u.trace[k].y, 1, 1);\r\n                    }\r\n                }\r\n                window.requestAnimationFrame(loop, canvas);\r\n            };\r\n            loop();\r\n        };\r\n\r\n        var s = document.readyState;\r\n        if (s === 'complete' || s === 'loaded' || s === 'interactive') init();\r\n        else document.addEventListener('DOMContentLoaded', init, false);\r\n    </script>\r\n\r\n</body>\r\n\r\n</html>"},{"question":"Code heat 04","code":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Haert3</title>\r\n    <style>\r\n        canvas {\r\n            position: absolute;\r\n            left: 0;\r\n            top: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            background-color: rgba(0, 0, 0, .2);\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n\r\n    <canvas id=\"heart\" width=\"393\" height=\"596\"></canvas>\r\n\r\n    <script>\r\n        window.requestAnimationFrame =\r\n            window.__requestAnimationFrame ||\r\n            window.requestAnimationFrame ||\r\n            window.webkitRequestAnimationFrame ||\r\n            window.mozRequestAnimationFrame ||\r\n            window.oRequestAnimationFrame ||\r\n            window.msRequestAnimationFrame ||\r\n            (function () {\r\n                return function (callback, element) {\r\n                    var lastTime = element.__lastTime;\r\n                    if (lastTime === undefined) {\r\n                        lastTime = 0;\r\n                    }\r\n                    var currTime = Date.now();\r\n                    var timeToCall = Math.max(1, 33 - (currTime - lastTime));\r\n                    window.setTimeout(callback, timeToCall);\r\n                    element.__lastTime = currTime + timeToCall;\r\n                };\r\n            })();\r\n        window.isDevice = (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(((navigator.userAgent || navigator.vendor || window.opera)).toLowerCase()));\r\n        var loaded = false;\r\n        var init = function () {\r\n            if (loaded) return;\r\n            loaded = true;\r\n            var mobile = window.isDevice;\r\n            var koef = mobile ? 0.5 : 1;\r\n            var canvas = document.getElementById('heart');\r\n            var ctx = canvas.getContext('2d');\r\n            var width = canvas.width = koef * innerWidth;\r\n            var height = canvas.height = koef * innerHeight;\r\n            var rand = Math.random;\r\n            ctx.fillStyle = \"rgba(0,0,0,1)\";\r\n            ctx.fillRect(0, 0, width, height);\r\n\r\n            var heartPosition = function (rad) {\r\n                //return [Math.sin(rad), Math.cos(rad)];\r\n                return [Math.pow(Math.sin(rad), 3), -(15 * Math.cos(rad) - 5 * Math.cos(2 * rad) - 2 * Math.cos(3 * rad) - Math.cos(4 * rad))];\r\n            };\r\n            var scaleAndTranslate = function (pos, sx, sy, dx, dy) {\r\n                return [dx + pos[0] * sx, dy + pos[1] * sy];\r\n            };\r\n\r\n            window.addEventListener('resize', function () {\r\n                width = canvas.width = koef * innerWidth;\r\n                height = canvas.height = koef * innerHeight;\r\n                ctx.fillStyle = \"rgba(0,0,0,1)\";\r\n                ctx.fillRect(0, 0, width, height);\r\n            });\r\n\r\n            var traceCount = mobile ? 20 : 50;\r\n            var pointsOrigin = [];\r\n            var i;\r\n            var dr = mobile ? 0.3 : 0.1;\r\n            for (i = 0; i < Math.PI * 2; i += dr) pointsOrigin.push(scaleAndTranslate(heartPosition(i), 210, 13, 0, 0));\r\n            for (i = 0; i < Math.PI * 2; i += dr) pointsOrigin.push(scaleAndTranslate(heartPosition(i), 150, 9, 0, 0));\r\n            for (i = 0; i < Math.PI * 2; i += dr) pointsOrigin.push(scaleAndTranslate(heartPosition(i), 90, 5, 0, 0));\r\n            var heartPointsCount = pointsOrigin.length;\r\n\r\n            var targetPoints = [];\r\n            var pulse = function (kx, ky) {\r\n                for (i = 0; i < pointsOrigin.length; i++) {\r\n                    targetPoints[i] = [];\r\n                    targetPoints[i][0] = kx * pointsOrigin[i][0] + width / 2;\r\n                    targetPoints[i][1] = ky * pointsOrigin[i][1] + height / 2;\r\n                }\r\n            };\r\n\r\n            var e = [];\r\n            for (i = 0; i < heartPointsCount; i++) {\r\n                var x = rand() * width;\r\n                var y = rand() * height;\r\n                e[i] = {\r\n                    vx: 0,\r\n                    vy: 0,\r\n                    R: 2,\r\n                    speed: rand() + 5,\r\n                    q: ~~(rand() * heartPointsCount),\r\n                    D: 2 * (i % 2) - 1,\r\n                    force: 0.2 * rand() + 0.7,\r\n                    f: \"hsla(0,\" + ~~(40 * rand() + 60) + \"%,\" + ~~(60 * rand() + 20) + \"%,.3)\",\r\n                    trace: []\r\n                };\r\n                for (var k = 0; k < traceCount; k++) e[i].trace[k] = { x: x, y: y };\r\n            }\r\n\r\n            var config = {\r\n                traceK: 0.4,\r\n                timeDelta: 0.01\r\n            };\r\n\r\n            var time = 0;\r\n            var loop = function () {\r\n                var n = -Math.cos(time);\r\n                pulse((1 + n) * .5, (1 + n) * .5);\r\n                time += ((Math.sin(time)) < 0 ? 9 : (n > 0.8) ? .2 : 1) * config.timeDelta;\r\n                ctx.fillStyle = \"rgba(0,0,0,.1)\";\r\n                ctx.fillRect(0, 0, width, height);\r\n                for (i = e.length; i--;) {\r\n                    var u = e[i];\r\n                    var q = targetPoints[u.q];\r\n                    var dx = u.trace[0].x - q[0];\r\n                    var dy = u.trace[0].y - q[1];\r\n                    var length = Math.sqrt(dx * dx + dy * dy);\r\n                    if (10 > length) {\r\n                        if (0.95 < rand()) {\r\n                            u.q = ~~(rand() * heartPointsCount);\r\n                        } else {\r\n                            if (0.99 < rand()) {\r\n                                u.D *= -1;\r\n                            }\r\n                            u.q += u.D;\r\n                            u.q %= heartPointsCount;\r\n                            if (0 > u.q) {\r\n                                u.q += heartPointsCount;\r\n                            }\r\n                        }\r\n                    }\r\n                    u.vx += -dx / length * u.speed;\r\n                    u.vy += -dy / length * u.speed;\r\n                    u.trace[0].x += u.vx;\r\n                    u.trace[0].y += u.vy;\r\n                    u.vx *= u.force;\r\n                    u.vy *= u.force;\r\n                    for (k = 0; k < u.trace.length - 1;) {\r\n                        var T = u.trace[k];\r\n                        var N = u.trace[++k];\r\n                        N.x -= config.traceK * (N.x - T.x);\r\n                        N.y -= config.traceK * (N.y - T.y);\r\n                    }\r\n                    ctx.fillStyle = u.f;\r\n                    for (k = 0; k < u.trace.length; k++) {\r\n                        ctx.fillRect(u.trace[k].x, u.trace[k].y, 1, 1);\r\n                    }\r\n                }\r\n                ctx.fillStyle = \"rgba(255,255,255,1)\";\r\n                for (i = u.trace.length + 13; i--;) ctx.fillRect(targetPoints[i][0], targetPoints[i][1], 2, 2);\r\n\r\n                window.requestAnimationFrame(loop, canvas);\r\n            };\r\n            loop();\r\n        };\r\n\r\n        var s = document.readyState;\r\n        if (s === 'complete' || s === 'loaded' || s === 'interactive') init();\r\n        else document.addEventListener('DOMContentLoaded', init, false);\r\n    </script>\r\n\r\n</body>\r\n\r\n</html>"},{"question":"Code heart 05","code":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Code Heart 05</title>\r\n    <style>\r\n        @import url(\"https://fonts.googleapis.com/css?family=Raleway:900&display=swap\");\r\n\r\n        html,\r\n        body {\r\n            position: relative;\r\n            height: 100%;\r\n            padding: 0;\r\n            margin: 0;\r\n            background: rgb(10, 10, 3);\r\n        }\r\n\r\n        #text1,\r\n        #text2 {\r\n            position: absolute;\r\n            top: 45%;\r\n            left: 50%;\r\n            transform: translate(-50%, -50%);\r\n            color: pink;\r\n            font-family: \"Raleway\", sans-serif;\r\n            font-size: 35pt;\r\n        }\r\n\r\n        canvas {\r\n            position: absolute;\r\n            width: 100%;\r\n            height: 100%;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <p id=\"text1\"></p>\r\n    <p id=\"text2\"></p>\r\n    <canvas id=\"pinkboard\"></canvas>\r\n    <script>\r\n        const elts = {\r\n            text1: document.getElementById(\"text1\"),\r\n            text2: document.getElementById(\"text2\"),\r\n        };\r\n        const texts = [\"I\", \"Love\", \"You\", \"3000\", \"❤️❤️❤️\"];\r\n        const morphTime = 1;\r\n        const cooldownTime = 0.25;\r\n        let textIndex = texts.length - 1;\r\n        let time = new Date();\r\n        let morph = 0;\r\n        let cooldown = cooldownTime;\r\n        elts.text1.textContent = texts[textIndex % texts.length];\r\n        elts.text2.textContent = texts[(textIndex + 1) % texts.length];\r\n        function doMorph() {\r\n            morph -= cooldown;\r\n            cooldown = 0;\r\n            let fraction = morph / morphTime;\r\n            if (fraction > 1) {\r\n                cooldown = cooldownTime;\r\n                fraction = 1;\r\n            }\r\n            setMorph(fraction);\r\n        }\r\n\r\n        function setMorph(fraction) {\r\n            elts.text2.style.filter = `blur(${Math.min(8 / fraction - 8, 100)}px)`;\r\n            elts.text2.style.opacity = `${Math.pow(fraction, 0.4) * 100}%`;\r\n            fraction = 1 - fraction;\r\n            elts.text1.style.filter = `blur(${Math.min(8 / fraction - 8, 100)}px)`;\r\n            elts.text1.style.opacity = `${Math.pow(fraction, 0.4) * 100}%`;\r\n            elts.text1.textContent = texts[textIndex % texts.length];\r\n            elts.text2.textContent = texts[(textIndex + 1) % texts.length];\r\n        }\r\n\r\n        function doCooldown() {\r\n            morph = 0;\r\n            elts.text2.style.filter = \"\";\r\n            elts.text2.style.opacity = \"100%\";\r\n            elts.text1.style.filter = \"\";\r\n            elts.text1.style.opacity = \"0%\";\r\n        }\r\n\r\n        function animate() {\r\n            requestAnimationFrame(animate);\r\n            let newTime = new Date();\r\n            let shouldIncrementIndex = cooldown > 0;\r\n            let dt = (newTime - time) / 1000;\r\n            time = newTime;\r\n            cooldown -= dt;\r\n            if (cooldown <= 0) {\r\n                if (shouldIncrementIndex) {\r\n                    textIndex++;\r\n                }\r\n                doMorph();\r\n            } else {\r\n                doCooldown();\r\n            }\r\n        }\r\n        animate();\r\n\r\n        /*\r\n          * Settings\r\n          */\r\n\r\n        var settings = {\r\n            particles: {\r\n                length: 500,\r\n                duration: 2,\r\n                velocity: 100,\r\n                effect: -0.75,\r\n                size: 30,\r\n            },\r\n        };\r\n\r\n        /*\r\n          * RequestAnimationFrame polyfill by Erik Möller\r\n          */\r\n\r\n        (function () {\r\n            var b = 0;\r\n            var c = [\"ms\", \"moz\", \"webkit\", \"o\"];\r\n            for (var a = 0; a < c.length && !window.requestAnimationFrame; ++a) {\r\n                window.requestAnimationFrame = window[c[a] + \"RequestAnimationFrame\"];\r\n                window.cancelAnimationFrame =\r\n                    window[c[a] + \"CancelAnimationFrame\"] ||\r\n                    window[c[a] + \"CancelRequestAnimationFrame\"];\r\n            }\r\n            if (!window.requestAnimationFrame) {\r\n                window.requestAnimationFrame = function (h, e) {\r\n                    var d = new Date().getTime();\r\n                    var f = Math.max(0, 16 - (d - b));\r\n                    var g = window.setTimeout(function () {\r\n                        h(d + f);\r\n                    }, f);\r\n                    b = d + f;\r\n                    return g;\r\n                };\r\n            }\r\n            if (!window.cancelAnimationFrame) {\r\n                window.cancelAnimationFrame = function (d) {\r\n                    clearTimeout(d);\r\n                };\r\n            }\r\n        })();\r\n\r\n        /*\r\n                  * Point class\r\n                  */\r\n\r\n        var Point = (function () {\r\n            function Point(x, y) {\r\n                this.x = typeof x !== \"undefined\" ? x : 0;\r\n                this.y = typeof y !== \"undefined\" ? y : 0;\r\n            }\r\n            Point.prototype.clone = function () {\r\n                return new Point(this.x, this.y);\r\n            };\r\n            Point.prototype.length = function (length) {\r\n                if (typeof length == \"undefined\")\r\n                    return Math.sqrt(this.x * this.x + this.y * this.y);\r\n                this.normalize();\r\n                this.x *= length;\r\n                this.y *= length;\r\n                return this;\r\n            };\r\n            Point.prototype.normalize = function () {\r\n                var length = this.length();\r\n                this.x /= length;\r\n                this.y /= length;\r\n                return this;\r\n            };\r\n            return Point;\r\n        })();\r\n\r\n        /*\r\n                  * Particle class\r\n                  */\r\n\r\n        var Particle = (function () {\r\n            function Particle() {\r\n                this.position = new Point();\r\n                this.velocity = new Point();\r\n                this.acceleration = new Point();\r\n                this.age = 0;\r\n            }\r\n\r\n            Particle.prototype.initialize = function (x, y, dx, dy) {\r\n                this.position.x = x;\r\n                this.position.y = y;\r\n                this.velocity.x = dx;\r\n                this.velocity.y = dy;\r\n                this.acceleration.x = dx * settings.particles.effect;\r\n                this.acceleration.y = dy * settings.particles.effect;\r\n                this.age = 0;\r\n            };\r\n\r\n            Particle.prototype.update = function (deltaTime) {\r\n                this.position.x += this.velocity.x * deltaTime;\r\n                this.position.y += this.velocity.y * deltaTime;\r\n                this.velocity.x += this.acceleration.x * deltaTime;\r\n                this.velocity.y += this.acceleration.y * deltaTime;\r\n                this.age += deltaTime;\r\n            };\r\n\r\n            Particle.prototype.draw = function (context, image) {\r\n                function ease(t) {\r\n                    return --t * t * t + 1;\r\n                }\r\n                var size = image.width * ease(this.age / settings.particles.duration);\r\n                context.globalAlpha = 1 - this.age / settings.particles.duration;\r\n                context.drawImage(\r\n                    image,\r\n                    this.position.x - size / 2,\r\n                    this.position.y - size / 2,\r\n                    size,\r\n                    size\r\n                );\r\n            };\r\n\r\n            return Particle;\r\n        })();\r\n\r\n        /*\r\n                  * ParticlePool class\r\n                  */\r\n\r\n        var ParticlePool = (function () {\r\n            var particles,\r\n                firstActive = 0,\r\n                firstFree = 0,\r\n                duration = settings.particles.duration;\r\n            function ParticlePool(length) {\r\n                particles = new Array(length);\r\n                for (var i = 0; i < particles.length; i++)\r\n                    particles[i] = new Particle();\r\n            }\r\n\r\n            ParticlePool.prototype.add = function (x, y, dx, dy) {\r\n                particles[firstFree].initialize(x, y, dx, dy);\r\n                firstFree++;\r\n                if (firstFree == particles.length) firstFree = 0;\r\n                if (firstActive == firstFree) firstActive++;\r\n                if (firstActive == particles.length) firstActive = 0;\r\n            };\r\n\r\n            ParticlePool.prototype.update = function (deltaTime) {\r\n                var i;\r\n                // update active particles\r\n                if (firstActive < firstFree) {\r\n                    for (i = firstActive; i < firstFree; i++)\r\n                        particles[i].update(deltaTime);\r\n                }\r\n                if (firstFree < firstActive) {\r\n                    for (i = firstActive; i < particles.length; i++)\r\n                        particles[i].update(deltaTime);\r\n                    for (i = 0; i < firstFree; i++) particles[i].update(deltaTime);\r\n                }\r\n\r\n                // remove inactive particles\r\n\r\n                while (\r\n                    particles[firstActive].age >= duration &&\r\n                    firstActive != firstFree\r\n                ) {\r\n                    firstActive++;\r\n\r\n                    if (firstActive == particles.length) firstActive = 0;\r\n                }\r\n            };\r\n\r\n            ParticlePool.prototype.draw = function (context, image) {\r\n                // draw active particles\r\n\r\n                if (firstActive < firstFree) {\r\n                    for (i = firstActive; i < firstFree; i++)\r\n                        particles[i].draw(context, image);\r\n                }\r\n\r\n                if (firstFree < firstActive) {\r\n                    for (i = firstActive; i < particles.length; i++)\r\n                        particles[i].draw(context, image);\r\n\r\n                    for (i = 0; i < firstFree; i++) particles[i].draw(context, image);\r\n                }\r\n            };\r\n\r\n            return ParticlePool;\r\n        })();\r\n\r\n        /*\r\n                  * Putting it all together\r\n                  */\r\n\r\n        (function (canvas) {\r\n            var context = canvas.getContext(\"2d\"),\r\n                particles = new ParticlePool(settings.particles.length),\r\n                particleRate = settings.particles.length / settings.particles.duration, // particles/sec\r\n                time;\r\n\r\n            // get point on heart with -PI <= t <= PI\r\n\r\n            function pointOnHeart(t) {\r\n                return new Point(\r\n                    160 * Math.pow(Math.sin(t), 3),\r\n\r\n                    130 * Math.cos(t) -\r\n                    50 * Math.cos(2 * t) -\r\n                    20 * Math.cos(3 * t) -\r\n                    10 * Math.cos(4 * t) +\r\n                    25\r\n                );\r\n            }\r\n\r\n            // creating the particle image using a dummy canvas\r\n\r\n            var image = (function () {\r\n                var canvas = document.createElement(\"canvas\"),\r\n                    context = canvas.getContext(\"2d\");\r\n                canvas.width = settings.particles.size;\r\n                canvas.height = settings.particles.size;\r\n                // helper function to create the path\r\n\r\n                function to(t) {\r\n                    var point = pointOnHeart(t);\r\n                    point.x =\r\n                        settings.particles.size / 2 +\r\n                        (point.x * settings.particles.size) / 350;\r\n                    point.y =\r\n                        settings.particles.size / 2 -\r\n                        (point.y * settings.particles.size) / 350;\r\n                    return point;\r\n                }\r\n\r\n                // create the path\r\n\r\n                context.beginPath();\r\n                var t = -Math.PI;\r\n                var point = to(t);\r\n                context.moveTo(point.x, point.y);\r\n                while (t < Math.PI) {\r\n                    t += 0.01; // baby steps!\r\n                    point = to(t);\r\n                    context.lineTo(point.x, point.y);\r\n                }\r\n                context.closePath();\r\n\r\n                // create the fill\r\n                context.fillStyle = \"#ea80b0\";\r\n                context.fill();\r\n\r\n                // create the image\r\n                var image = new Image();\r\n                image.src = canvas.toDataURL();\r\n                return image;\r\n            })();\r\n\r\n            // render that thing!\r\n            function render() {\r\n                // next animation frame\r\n                requestAnimationFrame(render);\r\n                // update time\r\n                var newTime = new Date().getTime() / 1000,\r\n                    deltaTime = newTime - (time || newTime);\r\n                time = newTime;\r\n                // clear canvas\r\n                context.clearRect(0, 0, canvas.width, canvas.height);\r\n                // create new particles\r\n                var amount = particleRate * deltaTime;\r\n                for (var i = 0; i < amount; i++) {\r\n                    var pos = pointOnHeart(Math.PI - 2 * Math.PI * Math.random());\r\n                    var dir = pos.clone().length(settings.particles.velocity);\r\n                    particles.add(\r\n                        canvas.width / 2 + pos.x,\r\n                        canvas.height / 2 - pos.y,\r\n                        dir.x,\r\n                        -dir.y\r\n                    );\r\n                }\r\n\r\n                // update and draw particles\r\n\r\n                particles.update(deltaTime);\r\n                particles.draw(context, image);\r\n            }\r\n\r\n            // handle (re-)sizing of the canvas\r\n\r\n            function onResize() {\r\n                canvas.width = canvas.clientWidth;\r\n                canvas.height = canvas.clientHeight;\r\n            }\r\n            window.onresize = onResize;\r\n            // delay rendering bootstrap\r\n            setTimeout(function () {\r\n                onResize();\r\n                render();\r\n            }, 10);\r\n\r\n            // Redirect to Messenger\r\n            // \tsetTimeout(function () {\r\n            // \t\twindow.open(\r\n            // \t\t\t\"https://www.facebook.com/messages/t/100014229402317\",\r\n            // \t\t\t\"_blank\"\r\n            // \t\t);\r\n            // \t}, 10000);\r\n\r\n            // Open to Messenger\r\n            // \tsetTimeout(function () {\r\n            // \t\twindow.location.href =\r\n            // \t\t\t\"https://www.facebook.com/messages/t/100014229402317\";\r\n            // \t}, 30000);\r\n\r\n            // End\r\n        })(document.getElementById(\"pinkboard\"));\r\n\r\n    </script>\r\n\r\n</body>\r\n\r\n</html>"}]}"
}